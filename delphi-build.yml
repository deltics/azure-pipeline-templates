parameters:
  delphiVersion: ''
  project: ''
  appType: 'CONSOLE'    # CONSOLE (default) or GUI
  platform: 'x86'
  searchPath: ''
  unitScopes: 'System;System.Win;Vcl;WinApi'
  fixPack: 'true'
  verbose: 'false'
  preBuild: []
  preBuildInline: ''
  postBuild: []
  postBuildInline: ''

steps:
- ${{ parameters.preBuild }}
- powershell: |
    function CreateDir
    {
      param([string]$path)
      if (-Not(Test-Path $path)) { New-Item $path -ItemType directory | Out-Null }
    }

    function Delete
    {
      param([string]$item)
      if (Test-Path $item) { Remove-Item $item | Out-Null }
    }

    $dVer        = '${{ parameters.delphiVersion }}'
    $project     = '${{ parameters.project }}'
    $appType     = '${{ parameters.appType }}'
    $platform    = '${{ parameters.platform }}'
    $uses        = '${{ parameters.searchPath }}'
    $unitScopes  = '${{ parameters.unitScopes }}'
    $fixPack     = '${{ parameters.fixPack }}'
    $verbose     = '${{ parameters.verbose }}'

    # Human meaningful into useful

    $bits = if($platform -eq 'x64') {'64'} else {'32'}

    if     ($dVer -eq '7')    { $d = 150 }
    elseif ($dVer -eq '8')    { $d = 160 }
    elseif ($dVer -eq '2005') { $d = 170 }
    elseif ($dVer -eq '2006') { $d = 180 }
    elseif ($dVer -eq '2007') { $d = 185 }
    elseif ($dVer -eq '2009') { $d = 200 }
    elseif ($dVer -eq '2010') { $d = 210 }
    elseif ($dVer -eq 'xe')   { $d = 220 }
    elseif ($dVer -eq 'xe2')  { $d = 230 }
    elseif ($dVer -eq 'xe3')  { $d = 240 }
    elseif ($dVer -eq 'xe4')  { $d = 250 }
    elseif ($dVer -eq 'xe5')  { $d = 260 }
    elseif ($dVer -eq 'xe6')  { $d = 270 }
    elseif ($dVer -eq 'xe7')  { $d = 280 }
    elseif ($dVer -eq 'xe8')  { $d = 290 }
    elseif ($dVer -eq '10')   { $d = 300 }
    elseif ($dVer -eq '10.1') { $d = 310 }
    elseif ($dVer -eq '10.2') { $d = 320 }
    elseif ($dVer -eq '10.3') { $d = 330 }
    else
    {
        Write-Host "##vso[task.logissue type=error]Delphi version '$(dVer)' is not supported"
    }
    $dXE = 220

    # Useful references

    $cd  = Get-Location
    $bin     = Join-Path $cd '\.bin'
    $results = Join-Path $cd '\.results'

    CreateDir('.bin')
    CreateDir('.results')

    $dprName = $(Split-Path -Leaf $project)
    $dprPath = $(Split-Path -Path $project)

    $cfg = $dprName + '.cfg'
    $dpr = $dprName + '.dpr'
    $exe = Join-Path $bin $($dprName + '.exe')

    $dr = Join-Path 'c:\dcc' $dVer
    $db = Join-Path $dr 'bin'
    $dl = Join-Path $dr 'lib'

    # If an IDE FixPack compiler is found, use that instead.

    $dcc = $db + '\dcc' + $bits + '.exe'

    if($fixPack -eq 'true')
    {
        Write-Host 'Checking for IDE FixPack compilers'

        $dccSpeed = $db + '\dcc' + $bits + 'speed.exe'
        $fastDcc  = $db + '\fastdcc' + $bits + '.exe'

        if     (Test-Path $dccSpeed) { $dcc = $dccSpeed }
        elseif (Test-Path $fastDcc)  { $dcc = $fastDcc }
    }

    # Setup lib and search path

    if     ($d -eq $dXE) { $dl = $dl + '\win32\release' }
    elseif ($d -gt $dXE) { $dl = $dl + '\win' + $bits + '\release' }

    $uses = $dl + ';' + $uses

    Set-Location $dprPath
    try
    {
        # Remove any previous build and config

        Delete($exe)
        Delete($cfg)
        Delete($('dcc' + $bits + '.cfg'))

        New-Item $cfg -ItemType file | Out-Null

        Add-Content $cfg $('-D' + $appType)
        Add-Content $cfg $('-E' + $bin)
        Add-Content $cfg $('-I' + $uses)
        Add-Content $cfg $('-N' + $bin)
        Add-Content $cfg $('-R' + $uses)
        Add-Content $cfg $('-U' + $uses)
        if ($d -gt $dXE) { Add-Content $cfg $('-NS' + $unitScopes) }

        ${{ parameters.preBuildInline }}
        Write-Host $('Config [' + $cfg + ']:')
        type $cfg

        # Invoke the compiler
        $cmd = $dcc + ' ' + $dpr
        if ($appType -eq 'CONSOLE') { $cmd = $cmd + ' -CC' }

        Write-Host $(':>[' + $cmd + ']')
        if ($verbose -ne 'true') { Invoke-Expression $cmd | Select-String -Pattern 'Fatal: ','Error: ','Hint: ','Warning: ' }
        else { Invoke-Expression $cmd }
    }
    finally
    {
        Set-Location $cd
    }
        
    # Report outcome
    if (Test-Path $exe)
    {
        Write-Host 'OK!'
        ${{ parameters.postBuildInline }}
    }
    else
    {
        Write-Host '##vso[task.logissue type=error]Build failed. :('
        exit 1
    }
  displayName: 'Delphi ${{ parameters.delphiVersion }} build (${{ parameters.platform }}) of ${{ parameters.project }}'
- ${{ parameters.postBuild }}
