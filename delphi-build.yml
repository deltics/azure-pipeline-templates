parameters:
  delphiVersion: ''
  project: ''
  appType: 'CONSOLE'        # CONSOLE (default) or GUI
  platform: 'x86'
  searchPath: ''
  unitScopes: 'System;System.Win;Vcl;WinApi'
  fixPack: 'true'
  continueOnError: false
  preBuild: []
  preBuildInline: ''
  postBuild: []
  postBuildInline: ''

steps:
- ${{ parameters.preBuild }}

- powershell: |
    function CreateDir
    {
      param([string]$path)
      if (-Not(Test-Path $path)) { New-Item $path -ItemType directory | Out-Null }
    }

    function Delete
    {
      param([string]$item)
      if (Test-Path $item) { Remove-Item $item | Out-Null }
    }

    $dVer        = '${{ parameters.delphiVersion }}'
    $project     = '${{ parameters.project }}'
    $appType     = '${{ parameters.appType }}'
    $platform    = '${{ parameters.platform }}'
    $uses        = '${{ parameters.searchPath }}'
    $unitScopes  = '${{ parameters.unitScopes }}'
    $fixPack     = '${{ parameters.fixPack }}'
    $verbose     = '${{ parameters.verbose }}'

    # Human meaningful into useful

    $bits = if($platform -eq 'x64') {'64'} else {'32'}
    
    $verMap = @{ '2'=90; '3'=100; '4'=120; '5'=130; '6'=140; '7'=150;
                 '2005'=170; '2006'=180; '2007'=185; '2009'=200; '2010'=210;
                 'xe'=220; 'xe2'=230; 'xe3'=240; 'xe4'=250; 'xe5'=260; 'xe6'=270; 'xe7'=280; 'xe8'=290;
                 '10'=300; '10.1'=310; '10.2'=320; '10.3'=330; '10.4'=340 }
                 
    if ($verMap.ContainsKey($dVer)) { $d = $verMap[$dVer] }
    else { Write-Host "##vso[task.logissue type=error]Delphi $dVer is not supported"
           exit }

    $dXE = 220

    # Useful references

    $cd  = Get-Location
    $bin = "$(Build.BinariesDirectory)"
    
    $dprName = $(Split-Path -Leaf $project)
    $dprPath = $(Split-Path -Path $project)

    $cfg = "$dprName.cfg"
    $dpr = "$dprName.dpr"
    $exe = Join-Path $bin "$dprName.exe"

    $dr = Join-Path 'c:\dcc' $dVer
    $db = Join-Path $dr 'bin'
    $dl = Join-Path $dr 'lib'

    if (-Not(Test-Path $db)) {
        $msg = "Delphi $dVer not available on this machine"
        Write-Host "##vso[task.complete result=Skipped;]$msg"
        Write-Host $msg
        exit }

    # If an IDE FixPack compiler is found, use that instead.

    $dcc = $db + "\dcc$bits.exe"
    
    if($fixPack -eq 'true') {
        Write-Host 'Checking for IDE FixPack compilers'

        $dccSpeed = $db + '\dcc' + $bits + 'speed.exe'
        $fastDcc  = $db + '\fastdcc' + $bits + '.exe'

        if     (Test-Path $dccSpeed) { $dcc = $dccSpeed }
        elseif (Test-Path $fastDcc)  { $dcc = $fastDcc } }

    # Setup lib and search path

    if     ($d -eq $dXE) { $dl = $dl + '\win32\release' }
    elseif ($d -gt $dXE) { $dl = $dl + "\win$bits\release" }

    $uses = "$dl;$uses"

    Set-Location $dprPath

    # Remove any previous build and config

    Delete($cfg)
    Delete("dcc$bits.cfg")

    New-Item $cfg -ItemType file | Out-Null

    Add-Content $cfg "-D$appType;_CICD"
    Add-Content $cfg "-E$bin"
    Add-Content $cfg "-N$bin"
    Add-Content $cfg "-U$uses"
    Add-Content $cfg "-$C+"
    if ($d -gt $dXE) { Add-Content $cfg "-NS$unitScopes" }

    ${{ parameters.preBuildInline }}

    Write-Host "Config [$cfg]:"
    type $cfg
    
    Copy-Item $cfg $("dcc$bits.cfg")

    # Invoke the compiler
    $cmd = "$dcc $dpr"
    if ($appType -eq 'CONSOLE') { $cmd += ' -CC' }

    $cmd += " | Select-String -SimpleMatch -Pattern 'Fatal: ','Error: ','Hint: ','Warning: '"
    Write-Host ":>[$cmd]"
    Invoke-Expression $cmd | Tee-Object -Variable out

    Set-Location $cd

    # Report outcome
    if (Test-Path $exe) {
        if ( $out.length -gt 0 ) {
            $msg = 'Build completed with hints/warnings. :/'
            $result = 'SucceededWithIssues'
            Write-Host "##vso[task.logissue type=warning]$msg"
        }
        else {
            $msg = 'Build completed OK. :)'
            $result = 'Succeeded'
        }
        Write-Host "##vso[task.complete result=$result;]$msg"
        Write-Host $msg

        ${{ parameters.postBuildInline }} }
    else {
        Write-Host "##vso[task.logissue type=error]Build failed. :("
        exit 1
    }
             
  displayName: 'Delphi ${{ parameters.delphiVersion }} build (${{ parameters.platform }}) of ${{ parameters.project }}'

- ${{ parameters.postBuild }}